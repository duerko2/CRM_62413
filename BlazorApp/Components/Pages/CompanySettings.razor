@page "/company-settings"
@using RolesAndPermissions
@inject IUserAccessManager UserAccessManager;
@inject CompanySettingsService CompanySettingsService;

<AuthorizeView>
<Authorized Context="another_name">
    @if(UserAccessManager.HasPermission(UserContext.User, "EditCompany"))
    {
        <h3>CompanySettings</h3>
        <hr/>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <p style="color:red">@_errorMessage</p>
        }
        <h4>Add user for company</h4>
        // info icon
        <i class="bi bi-info-circle bi-lg"></i>
        <p>Fill in the form below to add a new user to the company.</p>
        
        <EditForm Model="_newUser" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">E-mail:</label>
                <InputText id="email" @bind-Value="_newUser.Email" class="form-control w-auto"/>
            </div>
            <div class="form-group">
                <label for="role">Role:</label>
                <InputSelect  id="role" @bind-Value="_newUser.Role" class="form-control w-auto">
                    <option value="Manager">Manager</option>
                    <option value="User">User</option>
                </InputSelect>
            </div>

            <div class="d-flex justify-content-between mt-2">
                <button type="submit" class="btn btn-primary">Add User</button>
            </div>
        </EditForm>
    }
    else
    {
        <p>You do not have permission to view this page.</p>
    }
</Authorized>
</AuthorizeView>

@code {
    private NewUser _newUser = new NewUser();
    private string _errorMessage = "";

    [CascadingParameter] private UserContext UserContext { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Thread.Sleep(100);
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            CompanySettingsService.AddUserToCompany(_newUser, UserContext.UserId);
        } catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        _newUser = new NewUser();
    }
}