@page "/contacts"
@using System.Security.Claims
@using BlazorApp.Models
@using RolesAndPermissions
@inject Services.ContactService ContactService
@inject IUserAccessManager UserAccessManager;
@inject NavigationManager NavigationManager

<PageTitle>Contacts</PageTitle>

<h1>Contacts</h1>

@if (contacts == null || !contacts.Any())
{
    <p>No contacts available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th @onclick="@(() => SortContacts(nameof(ContactListRow.Name)))">
                    Contact Name @SortIndicator(nameof(ContactListRow.Name))
                </th>
                <th @onclick="@(() => SortContacts(nameof(ContactListRow.Type)))">
                    Type @SortIndicator(nameof(ContactListRow.Type))
                </th>
                <th @onclick="@(() => SortContacts(nameof(ContactListRow.Company)))">
                    Company @SortIndicator(nameof(ContactListRow.Company))
                </th>
                <th @onclick="@(() => SortContacts(nameof(ContactListRow.VAT)))">
                    VAT @SortIndicator(nameof(ContactListRow.VAT))
                </th>
                @if (UserAccessManager.HasPermission(AuthenticationStateTask.Result.User, "ViewAllContacts"))
                {
                    <th @onclick="@(() => SortContacts(nameof(ContactListRow.RepName)))">
                        Sales Rep @SortIndicator(nameof(ContactListRow.RepName))
                    </th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in contacts)
            {
                <tr>
                    <td>
                        <NavLink href="@($"/contacts/{contact.Id}")">
                            @contact.Name
                        </NavLink>
                    </td>
                    <td>@contact.Type.ToString()</td>
                    <td>@contact.Company</td>
                    <td>@contact.VAT</td>
                    @if (UserAccessManager.HasPermission(AuthenticationStateTask.Result.User, "ViewAllContacts"))
                    {
                        <td>@contact.RepName</td>
                    }
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToContactDetail(contact.Id)">
                            View Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    th {
        cursor: pointer;
        user-select: none;
    }

        th span {
            margin-left: 5px;
        }

        th:hover {
            text-decoration: underline;
        }
</style>

@code {
    private List<ContactListRow> contacts;
    private string currentSortColumn = nameof(ContactListRow.Id);
    private bool ascending = true;
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier);
        var userIdInt = userId == default ? default : int.Parse(userId.Value);
        if (userIdInt == 0)
        {
            Console.WriteLine("User not found");
            return;
        }
        bool loadAllContacts = UserAccessManager.HasPermission(user, "ViewAllContacts");
        if (loadAllContacts)
        {
            await LoadAllContacts(userIdInt);
        }
        else if (UserAccessManager.HasPermission(user, "ViewOwnContacts"))
        {
            await LoadContacts(userIdInt);
        }
        SortContacts(currentSortColumn, resetSortDirection: false);
        StateHasChanged();
    }

    private async Task LoadAllContacts(int userId)
    {
        contacts = ContactService.GetContactsForCompany(userId);
    }

    private async Task LoadContacts(int userId)
    {
        contacts = ContactService.GetContacts(userId);
    }

    private void NavigateToContactDetail(int contactId)
    {
        NavigationManager.NavigateTo($"/contacts/{contactId}");
    }

    private void SortContacts(string columnName, bool resetSortDirection = true)
    {
        if (currentSortColumn == columnName)
        {
            if (resetSortDirection)
            {
                // Toggle sort order if the same column is clicked
                ascending = !ascending;
            }
        }
        else
        {
            // Sort new column ascending by default
            currentSortColumn = columnName;
            ascending = true;
        }

        // LINQ to sort the contacts
        contacts = contacts.OrderBy(contact => GetSortValue(contact, currentSortColumn)).ToList();

        if (!ascending)
        {
            contacts.Reverse();
        }
    }

    private object GetSortValue(ContactListRow contact, string columnName)
    {
        return columnName switch
        {
            nameof(ContactListRow.Name) => contact.Name,
            nameof(ContactListRow.Type) => contact.Type,
            nameof(ContactListRow.Company) => contact.Company,
            nameof(ContactListRow.VAT) => contact.VAT,
            nameof(ContactListRow.RepName) => contact.RepName,
            nameof(ContactListRow.Id) => contact.Id,
            _ => contact.Id
        };
    }

    private MarkupString SortIndicator(string columnName)
    {
        if (currentSortColumn != columnName)
        {
            return new MarkupString("");
        }

        var arrow = ascending ? "&#9650;" : "&#9660;"; // Up or down arrow
        return new MarkupString($"<span>{arrow}</span>");
    }
}
