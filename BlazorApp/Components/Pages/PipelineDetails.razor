@page "/pipeline/{pipelineId:int}"
@using BlazorApp.Models
@using BlazorApp.Services
@inject PipelineService PipelineService
@inject NavigationManager NavigationManager
@inject CampaignService CampaignService 
@inject ContactService ContactService


<PageTitle>@campaign?.Name ?? "Pipeline Detail"</PageTitle>

<button class="btn btn-link" @onclick="GoBack" style="font-size:24px;">
    &#8592; Back
</button>

<div class="container">
    @if (pipeline != null && contact != null)
    {
        <!-- Display campaign name and contact information -->
        <h1>@campaign.Name</h1>
        <h4>@contact.Name (ID: @contact.Id)</h4>

        <!-- Centered Pipeline Status Heading -->
        <div class="text-center">
            <h5 style="font-size: 24px;">Pipeline Status</h5>
        </div>

        <!-- Pipeline status buttons displayed as a flow -->
        <div class="pipeline-status">
            @for (int i = 0; i < pipeline.PipelineStages.Count; i++)
            {
                var stage = pipeline.PipelineStages[i];

                <!-- Stage button -->
                <button class="@GetButtonClass(stage) stage-button"
                        @onclick="() => TryToggleStage(stage, i)"
                        disabled="@(ShouldDisableStage(stage))">
                    @stage
                </button>

                <!-- Arrow connector -->
                @if (i < pipeline.PipelineStages.Count - 1)
                {
                    <div class="stage-connector">➔</div>
                }
            }
        </div>

        <!-- Notification message -->
        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="alert alert-warning text-center mt-3">
                @notificationMessage
            </div>
        }

        <!-- Section for tasks -->
        <div class="row mt-4">
            <!-- Tasks column -->
            <div class="col-md-4 section-outline">
                <h5>Tasks</h5>

                <!-- Master Task for the current stage -->
                @if (currentMasterTask != null)
                {
                    <div class="task-item master-task">
                        <div class="task-item-content">
                            <p><strong>Master Task:</strong> @currentMasterTask.Description</p>
                            <button class="@GetButtonClassForTask(currentMasterTask)" 
                                    disabled="@taskCompletionStates[currentMasterTask]" 
                                    @onclick="() => ToggleTaskComplete(currentMasterTask)">
                                @(taskCompletionStates[currentMasterTask] ? "Completed" : "Complete")
                            </button>
                        </div>
                    </div>
                }

                <!-- Regular Tasks -->
                <div class="scrollable-tasks">
                    <ul class="task-list">
                        @foreach (var task in sortedTasks)
                        {
                            <li>
                                <div class="task-item @(task.IsMasterTask ? "master-task" : "")">
                                    <div class="task-item-content">
                                        <p class="task-description"><strong>Description:</strong> @task.Description</p>
                                        <p><strong>Created:</strong> @($"{task.CreatedDate:dd/MM/yyyy}")</p>
                                        <p><strong>Deadline:</strong> @($"{task.Deadline:dd/MM/yyyy}")</p>
                                    </div>
                                    <button class="@GetButtonClassForTask(task)" 
                                            disabled="@(task.IsMasterTask && taskCompletionStates[task])" 
                                            @onclick="() => ToggleTaskComplete(task)">
                                        @(taskCompletionStates[task] ? "Completed" : "Complete")
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Add task column -->
            <div class="col-md-4 section-outline">
                <h5>Add Task</h5>
                <div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <input id="taskDescription" @bind="newTaskDescription" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="createdDate">Created Date</label>
                        <input id="createdDate" type="date" @bind="newTaskCreatedDate" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="deadline">Deadline</label>
                        <input id="deadline" type="date" @bind="newTaskDeadline" class="form-control" />
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="AddTask">Add Task</button>
                </div>
            </div>

            <!-- Latest quote/order/invoice column -->
            <div class="col-md-4 section-outline">
                <h5>Latest Quote/Order/Invoice</h5>
                <div class="latest-quote">
                    @if (!string.IsNullOrEmpty(latestData.LatestType))
                    {
                        <p><strong>@latestData.LatestType:</strong> @latestData.Details</p>
                        <p><strong>Date:</strong> @($"{latestData.DateCreated:dd/MM/yyyy}")</p>
                    }
                    else
                    {
                        <p>@latestData.Message</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading pipeline details...</p>
    }
</div>


<style>
    /* Outline for each section to visually separate them */
    .section-outline {
        border: 1px solid #dee2e6; /* Light gray border */
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #f8f9fa; /* Light background */
    }

    /* Task item styles */
    .task-list {
        list-style-type: none;
        padding: 0;
    }

    .task-item {
        background-color: #f8f9fa;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #dee2e6; /* Outline for individual tasks */
        word-wrap: break-word; /* Allows long text to wrap within boundaries */
        position: relative; /* Enables absolute positioning for button */
    }

    .task-item.master-task {
        border-left: 5px solid #ffc107; /* Yellow border to highlight */
        background-color: #fff3cd; /* Light yellow background */
        border: 1px solid #ffc107; /* Optional: yellow border for emphasis */
    }

    .task-description {
        white-space: normal; /* Ensures text wraps to the next line */
        overflow-wrap: break-word; /* Breaks long words to keep text within the container */
    }

    /* Position the Complete button in the bottom-right corner */
    .task-item button {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }

    .task-item button.completed {
        background-color: #28a745;
        color: #fff;
    }

    /* Scrollable tasks container */
    .scrollable-tasks {
        max-height: 400px;
        overflow-y: auto;
    }

    /* Stage flow container */
    .pipeline-status {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* Space between stages */
        margin: 20px 0;
    }

    /* Stage button */
    .stage-button {
        background-color: #e0e0e0;
        color: #000;
        border: none;
        padding: 10px 20px;
        border-radius: 20px; /* Rounded edges for flow appearance */
        font-size: 14px;
        max-width: 150px; /* Accommodates up to 20 characters */
        overflow-wrap: break-word; /* Handles long text */
        word-break: break-word;
        text-align: center;
        cursor: pointer;
    }

    .stage-button.active {
        background-color: #007bff;
        color: #fff;
    }

    .stage-button.completed {
        background-color: #28a745;
        color: #fff;
    }

    /* Arrow connector */
    .stage-connector {
        display: flex;
        align-items: center;
        justify-content: center;
        color: purple; /* Updated arrow color to purple */
        font-size: 24px; /* Adjust arrow size */
        margin: 0 5px; /* Space around the arrow */
    }
</style>



@code {
    [Parameter]
    public int pipelineId { get; set; }
    public int Id { get; set; }

    private Pipeline pipeline;
    private Contact contact;
    private CampaignModel campaign;

    private LatestDataModel latestData = new LatestDataModel();
    private TaskModel currentMasterTask;
    private List<TaskModel> sortedTasks;
    private string notificationMessage = "";

    // Track the active/inactive state of pipeline stages
    private Dictionary<string, bool> stageStates = new Dictionary<string, bool>();

    // Track the completion status of each task
    private Dictionary<TaskModel, bool> taskCompletionStates = new Dictionary<TaskModel, bool>();

    // New task fields
    private string newTaskDescription;
    private DateTime newTaskCreatedDate = DateTime.Today;
    private DateTime newTaskDeadline = DateTime.Today;

    protected override void OnInitialized()
    {
        // Fetch the pipeline data based on pipelineId
        pipeline = PipelineService.GetPipelineById(pipelineId);

        if (pipeline == null)
        {
            Console.WriteLine($"Pipeline with ID {pipelineId} not found.");
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        Console.WriteLine($"Loaded Pipeline: ContactId = {pipeline.ContactId}, CampaignId = {pipeline.CampaignId}");

        // Use NewContactService to fetch the contact
        contact = ContactService.GetContactById(pipeline.ContactId);

        if (contact == null)
        {
            Console.WriteLine($"Contact with ID {pipeline.ContactId} not found.");
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Fetch the campaign data
        campaign = CampaignService.GetCampaignById(pipeline.CampaignId);

        if (campaign == null)
        {
            Console.WriteLine($"Campaign with ID {pipeline.CampaignId} not found.");
            NavigationManager.NavigateTo("/campaigns");
            return;
        }

        // Initialize latest data
        latestData = PipelineService.GetLatestData(contact.Id, pipeline.ActiveStage);

        // Initialize all pipeline stages
        foreach (var stage in pipeline.PipelineStages)
        {
            stageStates[stage] = stage == pipeline.ActiveStage;
        }

        // Initialize all tasks as incomplete
        foreach (var task in pipeline.Tasks)
        {
            taskCompletionStates[task] = false;
        }

        UpdateTasks();
    }

    private void UpdateTasks()
    {
        // Identify the master task for the current stage
        currentMasterTask = pipeline.Tasks
            .FirstOrDefault(t => t.IsMasterTask && t.Stage == pipeline.ActiveStage);

        // Filter and sort tasks:
        // 1. Include completed master tasks from previous stages.
        // 2. Exclude master tasks for future stages.
        // 3. Sort by completion status, with incomplete tasks first.
        sortedTasks = pipeline.Tasks
            .Where(t => !t.IsMasterTask || taskCompletionStates[t]) // Include only completed master tasks or regular tasks
            .OrderBy(t => taskCompletionStates[t]) // Incomplete tasks first
            .ThenBy(t => t.IsMasterTask) // Master tasks appear above regular tasks
            .ToList();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/contacts/{contact.Id}");
    }

    private void ToggleStage(string stage)
    {
        // Prevent moving to the next stage if the master task is not completed
        if (currentMasterTask != null && !taskCompletionStates[currentMasterTask] && stage != pipeline.ActiveStage)
        {
            return;
        }

        // Update active stage
        pipeline.ActiveStage = stage;

        // Update stage states
        foreach (var key in stageStates.Keys.ToList())
        {
            stageStates[key] = key == stage;
        }

        UpdateTasks();
    }


    private string GetButtonClass(string stage)
    {
        if (stageStates[stage])
        {
            return "active";
        }
        else if (pipeline.PipelineStages.IndexOf(stage) < pipeline.PipelineStages.IndexOf(pipeline.ActiveStage))
        {
            return "completed";
        }
        else
        {
            return "";
        }
    }

    private void ToggleTaskComplete(TaskModel task)
    {
        if (task.IsMasterTask && taskCompletionStates[task])
        {
            // Prevent toggling master tasks back once completed
            return;
        }

        taskCompletionStates[task] = !taskCompletionStates[task];
        UpdateTasks();
    }

    private bool ShouldDisableStage(string stage)
    {
        if (stage == pipeline.ActiveStage) return false;

        var currentIndex = pipeline.PipelineStages.IndexOf(pipeline.ActiveStage);
        var targetIndex = pipeline.PipelineStages.IndexOf(stage);

        return currentIndex + 1 != targetIndex;
    }

    private string GetButtonClassForTask(TaskModel task)
    {
        return taskCompletionStates[task] ? "btn btn-success completed" : "btn btn-primary";
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            var newTask = new TaskModel
                {
                    Id = pipeline.Tasks.Any() ? pipeline.Tasks.Max(t => t.Id) + 1 : 1,
                    PipelineId = pipelineId,
                    Description = newTaskDescription,
                    CreatedDate = newTaskCreatedDate,
                    Deadline = newTaskDeadline
                };

            // Add the new task to the pipeline's task list
            pipeline.Tasks.Add(newTask);

            // Add the task to taskCompletionStates with an initial state (false for incomplete)
            taskCompletionStates[newTask] = false;

            // Clear form fields after adding the task
            newTaskDescription = string.Empty;
            newTaskCreatedDate = DateTime.Today;
            newTaskDeadline = DateTime.Today;

            UpdateTasks();
        }
    }


    private void TryToggleStage(string stage, int stageIndex)
    {
        if (currentMasterTask != null && !taskCompletionStates[currentMasterTask])
        {
            // Notify the user if the master task is not completed
            notificationMessage = "Complete the master task for this stage before proceeding.";
            return;
        }

        // Clear notification if applicable and move to the next stage
        notificationMessage = "";
        ToggleStage(stage);
    }
}