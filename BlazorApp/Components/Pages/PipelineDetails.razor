@page "/pipeline/{pipelineId:int}"
@using BlazorApp.Models
@inject BlazorApp.Services.PipelineService PipelineService
@inject BlazorApp.Services.ContactService ContactService
@inject BlazorApp.Services.CampaignService CampaignService
@inject NavigationManager NavigationManager

<PageTitle>@campaign?.Name ?? "Pipeline Detail"</PageTitle>

<button class="btn btn-link" @onclick="GoBack" style="font-size:24px;">
    &#8592; Back
</button>

<div class="container">
    @if (pipeline != null && contact != null && campaign != null)
    {
        <!-- Display campaign and contact information -->
        <h1>@campaign.Name</h1>
        <h4>@contact.Name (ID: @contact.Id)</h4>

        <!-- Centered Pipeline Status Heading -->
        <div class="text-center">
            <h5 style="font-size: 24px;">Pipeline Status</h5>
        </div>

        <!-- Pipeline status buttons displayed as a chevron flow -->
        <div class="d-flex justify-content-center pipeline-status">
            @foreach (var stage in pipeline.PipelineStages)
            {
                <!-- Chevron-shaped buttons representing each pipeline stage -->
                <button class="@GetButtonClass(stage) chevron-button" @onclick="() => ToggleStage(stage)">
                    @stage
                </button>
            }
        </div>

        <!-- Section for displaying tasks and latest quote/order/invoice side by side -->
        <div class="row mt-4">
            <!-- Open tasks column -->
            <div class="col-md-4">
                <h5>Open Tasks</h5>
                <div class="scrollable-tasks">
                    <ul class="task-list">
                        @foreach (var task in pipeline.Tasks)
                        {
                            <li>
                                <div class="task-item">
                                    <div class="task-item-content">
                                        <!-- Display task description and dates -->
                                        <p><strong>Description:</strong> @task.Description</p>
                                        <p><strong>Created:</strong> @($"{task.CreatedDate:dd/MM/yyyy}")</p>
                                        <p><strong>Deadline:</strong> @($"{task.Deadline:dd/MM/yyyy}")</p>
                                    </div>
                                    <!-- Toggleable "Complete" button for each task -->
                                    <button class="@GetButtonClassForTask(task)" @onclick="() => ToggleTaskComplete(task)">
                                        @(taskCompletionStates[task] ? "Completed" : "Complete")
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Latest (quote, order, invoice) column -->
            <div class="col-md-8">
                <h5>Latest Quote/Order/Invoice</h5>
                <div class="latest-quote">
                    @if (!string.IsNullOrEmpty(latestData.LatestType))
                    {
                        <p><strong>@latestData.LatestType:</strong> @latestData.Details</p>
                        <p><strong>Date:</strong> @($"{latestData.DateCreated:dd/MM/yyyy}")</p>
                    }
                    else
                    {
                        <p>@latestData.Message</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading pipeline details...</p>
    }
</div>

<style>
    /* Chevron button styles */
    .pipeline-status {
        margin-bottom: 20px;
    }

    .chevron-button {
        position: relative;
        padding: 10px 20px;
        margin: 0 5px;
        background-color: #e0e0e0;
        border: none;
        color: #000;
        font-size: 14px;
        cursor: pointer;
    }

        .chevron-button.active {
            background-color: #007bff;
            color: #fff;
        }

        .chevron-button.completed {
            background-color: #28a745;
            color: #fff;
        }

        .chevron-button::before,
        .chevron-button::after {
            content: '';
            position: absolute;
            width: 0;
            height: 0;
            border-top: 20px solid transparent;
            border-bottom: 20px solid transparent;
        }

        .chevron-button::before {
            border-right: 10px solid #fff;
            left: -10px;
            top: 0;
        }

        .chevron-button::after {
            border-left: 10px solid #fff;
            right: -10px;
            top: 0;
        }

    /* Task item styles */
    .task-list {
        list-style-type: none;
        padding: 0;
    }

    .task-item {
        position: relative;
        background-color: #f8f9fa;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
    }

    .task-item-content {
        margin-bottom: 10px;
    }

    .task-item button {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }

        .task-item button.completed {
            background-color: #28a745;
            color: #fff;
        }

    /* Scrollable tasks container */
    .scrollable-tasks {
        max-height: 400px;
        overflow-y: auto;
    }
</style>

@code {
    [Parameter]
    public int pipelineId { get; set; }

    private Pipeline pipeline;
    private Contact contact;
    private Campaign campaign;

    private LatestDataModel latestData = new LatestDataModel();

    // Track the active/inactive state of pipeline stages
    private Dictionary<string, bool> stageStates = new Dictionary<string, bool>();

    // Track the completion status of each task
    private Dictionary<TaskModel, bool> taskCompletionStates = new Dictionary<TaskModel, bool>();

    protected override void OnInitialized()
    {
        // Fetch the pipeline data based on pipelineId
        pipeline = PipelineService.GetPipelineById(pipelineId);

        if (pipeline == null)
        {
            // Handle pipeline not found
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Fetch the contact data based on pipeline.ContactId
        contact = ContactService.GetContactById(pipeline.ContactId);

        if (contact == null)
        {
            // Handle contact not found
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Fetch the campaign data based on pipeline.CampaignId
        campaign = CampaignService.GetCampaignById(pipeline.CampaignId);

        if (campaign == null)
        {
            // Handle campaign not found
            NavigationManager.NavigateTo("/campaigns");
            return;
        }

        // Initialize latest data
        latestData = PipelineService.GetLatestData(contact.Id, pipeline.ActiveStage);

        // Initialize all pipeline stages
        foreach (var stage in pipeline.PipelineStages)
        {
            stageStates[stage] = stage == pipeline.ActiveStage;
        }

        // Initialize all tasks as incomplete
        foreach (var task in pipeline.Tasks)
        {
            taskCompletionStates[task] = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/contacts/{contact.Id}");
    }

    private void ToggleStage(string stage)
    {
        // Update the active stage in the pipeline
        pipeline.ActiveStage = stage;

        // Update the stage states
        foreach (var key in stageStates.Keys.ToList())
        {
            stageStates[key] = key == stage;
        }

        // Optionally, update the latest data based on the new stage
        latestData = PipelineService.GetLatestData(contact.Id, pipeline.ActiveStage);
    }

    private string GetButtonClass(string stage)
    {
        if (stageStates[stage])
        {
            return "active";
        }
        else if (pipeline.PipelineStages.IndexOf(stage) < pipeline.PipelineStages.IndexOf(pipeline.ActiveStage))
        {
            return "completed";
        }
        else
        {
            return "";
        }
    }

    private void ToggleTaskComplete(TaskModel task)
    {
        // Toggle the completion status
        taskCompletionStates[task] = !taskCompletionStates[task];
    }

    private string GetButtonClassForTask(TaskModel task)
    {
        return taskCompletionStates[task] ? "btn btn-success completed" : "btn btn-primary";
    }
}
