@page "/pipeline/{pipelineId:int}"
@using BlazorApp.Models
@using BlazorApp.Services
@inject PipelineService PipelineService
@inject NavigationManager NavigationManager

<PageTitle>@pipeline?.CampaignName ?? "Pipeline Detail"</PageTitle>

<button class="btn btn-link" @onclick="GoBack" style="font-size:24px;">
    &#8592; Back
</button>

<div class="container">
    @if (pipeline != null)
    {
        <!-- Display campaign name and contact information -->
        <h1>@pipeline.CampaignName</h1>
        <h4>@pipeline.ContactName (ID: @pipeline.ContactId)</h4>

        <!-- Centered Pipeline Status Heading -->
        <div class="text-center">
            <h5 style="font-size: 24px;">Pipeline Status</h5>
        </div>

        <!-- Pipeline status buttons displayed as a flow -->
        <div class="pipeline-status">
            @foreach (var stage in pipeline.Stages)
            {
                <button class="stage-button @(GetButtonClassForStage(stage))"
                        @onclick="() => TryToggleStage(stage)"
                        disabled="@ShouldDisableStage(stage)">
                    @stage
                </button>
                @if (pipeline.Stages.Last() != stage)
                {
                    <div class="stage-connector">➔</div>
                }
            }
        </div>

        <!-- Notification message -->
        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="alert alert-warning text-center mt-3">
                @notificationMessage
            </div>
        }

        <!-- Section for tasks -->
        <div class="row mt-4">
            <!-- Tasks column -->
            <div class="col-md-4 section-outline">
                <h5>Tasks</h5>
                @if (pipeline.CurrentMasterTask != null)
                {
                    <div class="task-item master-task">
                        <div class="task-item-content">
                            <p><strong>Master Task:</strong> @pipeline.CurrentMasterTask.Description</p>
                        </div>
                        <button class="@(GetButtonClassForTask(pipeline.CurrentMasterTask))"
                                disabled="@pipeline.CurrentMasterTask.IsCompleted"
                                @onclick="() => ToggleTaskComplete(pipeline.CurrentMasterTask)">
                            @(pipeline.CurrentMasterTask.IsCompleted ? "Completed" : "Complete")
                        </button>
                    </div>
                }

                <div class="scrollable-tasks">
                    <ul class="task-list">
                        @foreach (var task in pipeline.SortedTasks.Where(t =>
                            t != pipeline.CurrentMasterTask &&
                            (!t.IsMasterTask || t.IsCompleted)))
                        {
                            <li>
                                <div class="task-item @(task.IsMasterTask ? "master-task" : "")">
                                    <div class="task-item-content">
                                        <p class="task-description"><strong>Description:</strong> @task.Description</p>
                                        <p><strong>Created:</strong> @($"{task.CreatedDate:dd/MM/yyyy}")</p>
                                        <p><strong>Deadline:</strong> @($"{task.Deadline:dd/MM/yyyy}")</p>
                                    </div>
                                    <button class="@(GetButtonClassForTask(task))"
                                            disabled="@(task.IsMasterTask && task.IsCompleted)"
                                            @onclick="() => ToggleTaskComplete(task)">
                                        @(task.IsCompleted ? "Completed" : "Complete")
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Add task column -->
            <div class="col-md-4 section-outline">
                <h5>Add Task</h5>
                <div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <input id="taskDescription" @bind="newTaskDescription" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="createdDate">Created Date</label>
                        <input id="createdDate" type="date" @bind="newTaskCreatedDate" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="deadline">Deadline</label>
                        <input id="deadline" type="date" @bind="newTaskDeadline" class="form-control" />
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="AddTask">Add Task</button>
                </div>
            </div>

            <!-- Latest quote/order/invoice column -->
            <div class="col-md-4 section-outline">
                <h5>Latest Quote/Order/Invoice</h5>
                <div class="latest-quote">
                    @if (!string.IsNullOrEmpty(pipeline.LatestData?.LatestType))
                    {
                        <p><strong>@pipeline.LatestData.LatestType:</strong> @pipeline.LatestData.Details</p>
                        <p><strong>Date:</strong> @($"{pipeline.LatestData.DateCreated:dd/MM/yyyy}")</p>
                    }
                    else
                    {
                        <p>@pipeline.LatestData?.Message</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading pipeline details...</p>
    }
</div>

<style>
    /* Outline for each section to visually separate them */
    .section-outline {
        border: 1px solid #dee2e6; /* Light gray border */
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #f8f9fa; /* Light background */
    }

    /* Task item styles */
    .task-item {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #f8f9fa;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #dee2e6;
        word-wrap: break-word;
    }

        .task-item.master-task {
            border-left: 5px solid #ffc107;
            background-color: #fff3cd;
            border: 1px solid #ffc107;
        }

    .task-item-content {
        flex-grow: 1;
    }

    .task-description {
        white-space: normal;
        overflow-wrap: break-word;
    }

    .task-item button {
        align-self: flex-end;
        margin-top: 10px;
    }

        .task-item button.completed {
            background-color: #28a745;
            color: #fff;
        }

    /* Scrollable tasks container */
    .scrollable-tasks {
        max-height: 400px;
        overflow-y: auto;
    }

    /* Stage flow container */
    .pipeline-status {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* Space between stages */
        margin: 20px 0;
    }

    /* Stage button */
    .stage-button {
        background-color: #e0e0e0;
        color: #000;
        border: none;
        padding: 10px 20px;
        border-radius: 20px; /* Rounded edges for flow appearance */
        font-size: 14px;
        max-width: 150px; /* Accommodates up to 20 characters */
        overflow-wrap: break-word; /* Handles long text */
        word-break: break-word;
        text-align: center;
        cursor: pointer;
    }

        .stage-button.active {
            background-color: #007bff;
            color: #fff;
        }

        .stage-button.completed {
            background-color: #28a745;
            color: #fff;
        }

    /* Arrow connector */
    .stage-connector {
        display: flex;
        align-items: center;
        justify-content: center;
        color: purple; /* Updated arrow color to purple */
        font-size: 24px; /* Adjust arrow size */
        margin: 0 5px; /* Space around the arrow */
    }
</style>

@code {
    [Parameter]
    public int pipelineId { get; set; }

    private PipelineDetailModel pipeline;
    private string notificationMessage;

    private string newTaskDescription;
    private DateTime newTaskCreatedDate = DateTime.Today;
    private DateTime newTaskDeadline = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        pipeline = await PipelineService.GetPipelineDetailsAsync(pipelineId);
    }

    private void GoBack() => NavigationManager.NavigateTo("/contacts");

    private async Task TryToggleStage(string stageName)
    {
        try
        {
            await PipelineService.ToggleStageAsync(pipelineId, stageName);
            pipeline = await PipelineService.GetPipelineDetailsAsync(pipelineId);
        }
        catch (Exception ex)
        {
            notificationMessage = ex.Message;
        }
    }

    private async Task ToggleTaskComplete(TaskModel task)
    {
        try
        {
            await PipelineService.ToggleTaskCompleteAsync(task);
            pipeline = await PipelineService.GetPipelineDetailsAsync(pipelineId);
        }
        catch (Exception ex)
        {
            notificationMessage = ex.Message;
        }
    }

    private async Task AddTask()
    {
        try
        {
            await PipelineService.AddTaskAsync(newTaskDescription, newTaskCreatedDate, newTaskDeadline, pipelineId);
            pipeline = await PipelineService.GetPipelineDetailsAsync(pipelineId);
            // Clear the input fields after adding the task
            newTaskDescription = string.Empty;
            newTaskCreatedDate = DateTime.Today;
            newTaskDeadline = DateTime.Today;
        }
        catch (Exception ex)
        {
            notificationMessage = ex.Message;
        }
    }

    private string GetButtonClassForStage(string stage)
    {
        if (stage == pipeline.ActiveStage)
            return "active";
        else if (pipeline.Stages.IndexOf(stage) < pipeline.Stages.IndexOf(pipeline.ActiveStage))
            return "completed";
        else
            return "";
    }

    private bool ShouldDisableStage(string stage)
    {
        if (stage == pipeline.ActiveStage)
            return false;

        var currentIndex = pipeline.Stages.IndexOf(pipeline.ActiveStage);
        var targetIndex = pipeline.Stages.IndexOf(stage);

        return targetIndex != currentIndex + 1;
    }

    private string GetButtonClassForTask(TaskModel task)
    {
        return task.IsCompleted ? "btn btn-success completed" : "btn btn-primary";
    }
}