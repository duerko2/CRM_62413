@page "/pipeline/{pipelineId:int}"
@using BlazorApp.Models
@using BlazorApp.Services
@inject PipelineService PipelineService
@inject NavigationManager NavigationManager
@inject CampaignService CampaignService 
@inject ContactService ContactService


<PageTitle>@campaign?.Name ?? "Pipeline Detail"</PageTitle>

<button class="btn btn-link" @onclick="GoBack" style="font-size:24px;">
    &#8592; Back
</button>

<div class="container">
    @if (pipeline != null && contact != null)
    {
        <!-- Display campaign name and contact information -->
        <h1>@campaign.Name</h1>
        <h4>@contact.Name (ID: @contact.Id)</h4>

        <!-- Centered Pipeline Status Heading -->
        <div class="text-center">
            <h5 style="font-size: 24px;">Pipeline Status</h5>
        </div>

        <!-- Pipeline status buttons displayed as a flow -->
        <div class="pipeline-status">
            @for (int i = 0; i < pipelineStages.Count; i++)
            {
                var stage = pipelineStages[i];

                <!-- Stage button -->
                <button class="@GetButtonClass(stage) stage-button"
                        @onclick="() => TryToggleStage(stage, i)"
                        disabled="@(ShouldDisableStage(stage))">
                    @stage
                </button>

                <!-- Arrow connector -->
                @if (i < pipelineStages.Count - 1)
                {
                    <div class="stage-connector">➔</div>
                }
            }
        </div>

        <!-- Notification message -->
        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="alert alert-warning text-center mt-3">
                @notificationMessage
            </div>
        }

        <!-- Section for tasks -->
        <div class="row mt-4">
            <!-- Tasks column -->
            <div class="col-md-4 section-outline">
                <h5>Tasks</h5>

                <!-- Master Task for the current stage -->
@if (currentMasterTask != null)
{
    <div class="task-item master-task">
        <div class="task-item-content">
            <p><strong>Master Task:</strong> @currentMasterTask.Description</p>
        </div>
        <button class="@GetButtonClassForTask(currentMasterTask)"
                disabled="@currentMasterTask.IsCompleted"
                @onclick="() => ToggleTaskComplete(currentMasterTask)">
            @(currentMasterTask.IsCompleted ? "Completed" : "Complete")
        </button>
    </div>
}



                <!-- Regular Tasks -->
                <div class="scrollable-tasks">
                    <ul class="task-list">
                        @foreach (var task in sortedTasks)
                        {
                            <li>
                                <div class="task-item @(task.IsMasterTask ? "master-task" : "")">
                                    <div class="task-item-content">
                                        <p class="task-description"><strong>Description:</strong> @task.Description</p>
                                        <p><strong>Created:</strong> @($"{task.CreatedDate:dd/MM/yyyy}")</p>
                                        <p><strong>Deadline:</strong> @($"{task.Deadline:dd/MM/yyyy}")</p>
                                    </div>
                                    <button class="@GetButtonClassForTask(task)"
                                            disabled="@(task.IsMasterTask && task.IsCompleted)"
                                            @onclick="() => ToggleTaskComplete(task)">
                                        @(task.IsCompleted ? "Completed" : "Complete")
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>


            <!-- Add task column -->
            <div class="col-md-4 section-outline">
                <h5>Add Task</h5>
                <div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <input id="taskDescription" @bind="newTaskDescription" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="createdDate">Created Date</label>
                        <input id="createdDate" type="date" @bind="newTaskCreatedDate" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="deadline">Deadline</label>
                        <input id="deadline" type="date" @bind="newTaskDeadline" class="form-control" />
                    </div>
                    <button class="btn btn-primary mt-2" @onclick="AddTask">Add Task</button>
                </div>
            </div>

            <!-- Latest quote/order/invoice column -->
            <div class="col-md-4 section-outline">
                <h5>Latest Quote/Order/Invoice</h5>
                <div class="latest-quote">
                    @if (!string.IsNullOrEmpty(latestData.LatestType))
                    {
                        <p><strong>@latestData.LatestType:</strong> @latestData.Details</p>
                        <p><strong>Date:</strong> @($"{latestData.DateCreated:dd/MM/yyyy}")</p>
                    }
                    else
                    {
                        <p>@latestData.Message</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading pipeline details...</p>
    }
</div>


<style>
    /* Outline for each section to visually separate them */
    .section-outline {
        border: 1px solid #dee2e6; /* Light gray border */
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #f8f9fa; /* Light background */
    }

            /* Task item styles */
            .task-item {
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                background-color: #f8f9fa;
                padding: 15px;
                margin-bottom: 10px;
                border-radius: 5px;
                border: 1px solid #dee2e6;
                word-wrap: break-word;
            }

                .task-item.master-task {
                    border-left: 5px solid #ffc107;
                    background-color: #fff3cd;
                    border: 1px solid #ffc107;
                }

            .task-item-content {
                flex-grow: 1;
            }

            .task-description {
                white-space: normal;
                overflow-wrap: break-word;
            }

            .task-item button {
                align-self: flex-end;
                margin-top: 10px;
            }

                .task-item button.completed {
                    background-color: #28a745;
                    color: #fff;
                }

                .task-item button.completed {
                    background-color: #28a745;
                    color: #fff;
                }


    /* Scrollable tasks container */
    .scrollable-tasks {
        max-height: 400px;
        overflow-y: auto;
    }

    /* Stage flow container */
    .pipeline-status {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* Space between stages */
        margin: 20px 0;
    }

    /* Stage button */
    .stage-button {
        background-color: #e0e0e0;
        color: #000;
        border: none;
        padding: 10px 20px;
        border-radius: 20px; /* Rounded edges for flow appearance */
        font-size: 14px;
        max-width: 150px; /* Accommodates up to 20 characters */
        overflow-wrap: break-word; /* Handles long text */
        word-break: break-word;
        text-align: center;
        cursor: pointer;
    }

    .stage-button.active {
        background-color: #007bff;
        color: #fff;
    }

    .stage-button.completed {
        background-color: #28a745;
        color: #fff;
    }

    /* Arrow connector */
    .stage-connector {
        display: flex;
        align-items: center;
        justify-content: center;
        color: purple; /* Updated arrow color to purple */
        font-size: 24px; /* Adjust arrow size */
        margin: 0 5px; /* Space around the arrow */
    }
</style>



@code {
    [Parameter]
    public int pipelineId { get; set; }

    private PipelineModel pipeline;
    private Contact contact;
    private CampaignModel campaign;

    private List<string> pipelineStages = new List<string>();
    private Dictionary<string, bool> stageStates = new Dictionary<string, bool>();

    private LatestDataModel latestData = new LatestDataModel();
    private TaskModel currentMasterTask;
    private List<TaskModel> sortedTasks;
    private string notificationMessage = "";

    private string newTaskDescription;
    private DateTime newTaskCreatedDate = DateTime.Today;
    private DateTime newTaskDeadline = DateTime.Today;

    protected override void OnInitialized()
    {
        // Fetch the pipeline data based on pipelineId
        pipeline = PipelineService.GetPipelineById(pipelineId);

        if (pipeline == null)
        {
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Get the contact
        contact = ContactService.GetContactById(pipeline.ContactId);

        // Fetch the campaign data
        campaign = CampaignService.GetCampaignById(pipeline.CampaignId);

        // Initialize the stages
        pipelineStages = campaign.Stages.Select(s => s.Name).ToList();

        // Initialize stage states
        foreach (var stage in pipelineStages)
        {
            stageStates[stage] = stage == pipeline.ActiveStage;
        }

        UpdateTasks();
    }

    private void UpdateTasks()
    {
        // Identify the master task for the current stage
        currentMasterTask = pipeline.Tasks
            .FirstOrDefault(t => t.IsMasterTask && t.Stage == pipeline.ActiveStage);

        // Filter and sort tasks:
        sortedTasks = pipeline.Tasks
            .Where(t => !t.IsMasterTask || t.IsCompleted)
            .OrderBy(t => t.IsCompleted)
            .ThenBy(t => t.IsMasterTask)
            .ToList();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/contacts/{contact.Id}");
    }

    private void ToggleStage(string stage)
    {
        // Prevent moving to the next stage if the master task is not completed
        if (currentMasterTask != null && !currentMasterTask.IsCompleted && stage != pipeline.ActiveStage)
        {
            return;
        }

        // Update active stage
        pipeline.ActiveStage = stage;

        // Update stage states
        foreach (var key in stageStates.Keys.ToList())
        {
            stageStates[key] = key == stage;
        }

        // Update latest data
        latestData = PipelineService.GetLatestData(contact.Id, pipeline.ActiveStage);

        // Update the pipeline in the database
        PipelineService.UpdatePipeline(pipeline);

        UpdateTasks();
    }

    private string GetButtonClass(string stage)
    {
        if (stageStates[stage])
        {
            return "active";
        }
        else if (pipelineStages.IndexOf(stage) < pipelineStages.IndexOf(pipeline.ActiveStage))
        {
            return "completed";
        }
        else
        {
            return "";
        }
    }

    private void ToggleTaskComplete(TaskModel task)
    {
        if (task.IsMasterTask && task.IsCompleted)
        {
            // Prevent toggling master tasks back once completed
            return;
        }

        task.IsCompleted = !task.IsCompleted;

        // Update the task in the database
        PipelineService.UpdateTask(task);

        UpdateTasks();
    }

    private bool ShouldDisableStage(string stage)
    {
        if (stage == pipeline.ActiveStage) return false;

        var currentIndex = pipelineStages.IndexOf(pipeline.ActiveStage);
        var targetIndex = pipelineStages.IndexOf(stage);

        return currentIndex + 1 != targetIndex;
    }

    private string GetButtonClassForTask(TaskModel task)
    {
        return task.IsCompleted ? "btn btn-success completed" : "btn btn-primary";
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            var newTask = new TaskModel
            {
                PipelineId = pipelineId,
                Description = newTaskDescription,
                CreatedDate = newTaskCreatedDate,
                Deadline = newTaskDeadline,
                IsMasterTask = false,
                IsCompleted = false,
                Stage = pipeline.ActiveStage // Setting the Stage property
            };

            // Add the new task to the pipeline's task list
            pipeline.Tasks.Add(newTask);

            // Save the new task to the database
            PipelineService.AddTask(newTask);

            // Clear form fields after adding the task
            newTaskDescription = string.Empty;
            newTaskCreatedDate = DateTime.Today;
            newTaskDeadline = DateTime.Today;

            UpdateTasks();
        }
    }

    private void TryToggleStage(string stage, int stageIndex)
    {
        if (currentMasterTask != null && !currentMasterTask.IsCompleted)
        {
            // Notify the user if the master task is not completed
            notificationMessage = "Complete the master task for this stage before proceeding.";
            return;
        }

        // Clear notification if applicable and move to the next stage
        notificationMessage = "";
        ToggleStage(stage);
    }
}