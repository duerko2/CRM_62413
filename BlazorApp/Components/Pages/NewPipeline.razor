@page "/newpipeline"
@using BlazorApp.Models
@using BlazorApp.Services
@inject PipelineService PipelineService
@inject ContactService ContactService
@inject NavigationManager NavigationManager

<PageTitle>New Pipeline</PageTitle>

<h3>Assign New Pipeline to Contact</h3>

<EditForm Model="newPipelineModel" OnValidSubmit="AssignPipeline">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <!-- Dropdown for selecting a contact -->
    <div class="form-group">
        <label for="contactId">Select Contact</label>
        <select id="contactId" class="form-control" @bind="newPipelineModel.ContactId">
            <option value="">-- Select a Contact --</option>
            @foreach (var contact in contacts)
            {
                <option value="@contact.Id">@contact.Name</option>
            }
        </select>
    </div>

    <!-- Input for campaign name -->
    <div class="form-group">
        <label for="campaignName">Campaign Name</label>
        <InputText id="campaignName" class="form-control" @bind-Value="newPipelineModel.CampaignName" placeholder="Enter campaign name" />
    </div>

    <!-- Inputs for pipeline stages (up to 5) -->
    <div class="form-group">
        <label>Pipeline Stages (up to 5)</label>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="newPipelineModel.Stage1" placeholder="Stage 1" />
        </div>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="newPipelineModel.Stage2" placeholder="Stage 2" />
        </div>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="newPipelineModel.Stage3" placeholder="Stage 3" />
        </div>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="newPipelineModel.Stage4" placeholder="Stage 4" />
        </div>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="newPipelineModel.Stage5" placeholder="Stage 5" />
        </div>
    </div>

    <!-- Error message for missing required fields -->
    @if (showErrorMessage)
    {
        <div class="alert alert-danger">Please select a contact and enter a campaign name.</div>
    }

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Assign Pipeline</button>
</EditForm>

@code {
    private NewPipelineModel newPipelineModel = new NewPipelineModel();
    private List<Contact> contacts = new List<Contact>();
    private bool showErrorMessage = false;

    protected override void OnInitialized()
    {
        // Load contacts for dropdown selection
        contacts = ContactService.GetContacts();
    }

    private void AssignPipeline()
    {
        // Check if required fields are filled
        if (string.IsNullOrWhiteSpace(newPipelineModel.CampaignName) || newPipelineModel.ContactId == 0)
        {
            showErrorMessage = true;
            return;
        }

        showErrorMessage = false;

        // Assign a unique ID for the new pipeline
        newPipelineModel.Id = PipelineService.GetNextPipelineId();

        // Use GetPipelineStages() to set the stages dynamically
        PipelineService.AddPipeline(newPipelineModel, newPipelineModel.GetPipelineStages());

        // Navigate to the Pipeline Details page for the newly assigned pipeline
        NavigationManager.NavigateTo($"/pipeline/{newPipelineModel.Id}");
    }

    private class NewPipelineModel : Pipeline
    {
        public string Stage1 { get; set; } = "";
        public string Stage2 { get; set; } = "";
        public string Stage3 { get; set; } = "";
        public string Stage4 { get; set; } = "";
        public string Stage5 { get; set; } = "";

        public NewPipelineModel()
        {
            Tasks = new List<TaskModel>(); // Initialize Tasks to an empty list
        }

        public List<string> GetPipelineStages()
        {
            return new List<string> { Stage1, Stage2, Stage3, Stage4, Stage5 }
                .Where(stage => !string.IsNullOrWhiteSpace(stage))
                .ToList();
        }
    }
}
