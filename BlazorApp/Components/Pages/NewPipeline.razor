@page "/newpipeline"
@using BlazorApp.Models
@using BlazorApp.Services
@using System.Security.Claims
@inject PipelineService PipelineService
@inject ContactService ContactService
@inject CampaignService CampaignService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>New Pipeline</PageTitle>

<h3>Assign Campaign to Contact</h3>

<EditForm Model="newPipelineModel" OnValidSubmit="AssignPipeline">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <!-- Dropdown for selecting a contact -->
    <div class="form-group">
        <label for="contactId">Select Contact</label>
        <select id="contactId" class="form-control" @bind="newPipelineModel.ContactId">
            <option value="">-- Select a Contact --</option>
            @foreach (var contact in contacts)
            {
                <option value="@contact.Id">@contact.Name</option>
            }
        </select>
    </div>

    <!-- Dropdown for selecting a campaign -->
    <div class="form-group">
        <label for="campaignId">Select Campaign</label>
        <select id="campaignId" class="form-control" @bind="newPipelineModel.CampaignId">
            <option value="">-- Select a Campaign --</option>
            @foreach (var campaign in campaigns)
            {
                <option value="@campaign.Id">@campaign.Name</option>
            }
        </select>
    </div>

    <!-- Error message for missing required fields -->
    @if (showErrorMessage)
    {
        <div class="alert alert-danger">Please select a contact and a campaign.</div>
    }

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Assign Campaign</button>
</EditForm>

@code {
    private Pipeline newPipelineModel = new Pipeline();
private List<ContactListRow> contacts = new List<ContactListRow>();
    private List<Campaign> campaigns = new List<Campaign>();
    private bool showErrorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        // Obtain the current user's ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            int userId = int.Parse(userIdClaim.Value);

            // Load contacts for dropdown selection from the database
            contacts = ContactService.GetContacts(userId);

            // Load campaigns for dropdown selection
            campaigns = CampaignService.GetAllCampaigns();
        }
        else
        {
            // Handle case where user is not authenticated
            NavigationManager.NavigateTo("/login");
        }
    }

    private void AssignPipeline()
    {
        // Check if required fields are filled
        if (newPipelineModel.CampaignId == 0 || newPipelineModel.ContactId == 0)
        {
            showErrorMessage = true;
            return;
        }

        System.Diagnostics.Debug.WriteLine($"Assigning pipeline: ContactId = {newPipelineModel.ContactId}, CampaignId = {newPipelineModel.CampaignId}");

        // Assign a unique ID for the new pipeline
        newPipelineModel.Id = PipelineService.GetNextPipelineId();

        // Get the selected campaign
        var selectedCampaign = CampaignService.GetCampaignById(newPipelineModel.CampaignId);

        // Set the pipeline stages from the campaign
        newPipelineModel.PipelineStages = selectedCampaign.Stages;

        // Set the master task requirements and descriptions from the campaign
        newPipelineModel.RequireMasterTask = selectedCampaign.RequireMasterTask;
        newPipelineModel.MasterTaskDescriptions = selectedCampaign.MasterTaskDescriptions;

        // Initialize the active stage to the first stage
        newPipelineModel.ActiveStage = selectedCampaign.Stages.First();

        // Initialize master tasks for the pipeline
        for (int i = 0; i < selectedCampaign.Stages.Count; i++)
        {
            if (selectedCampaign.RequireMasterTask[i])
            {
                var masterTask = new TaskModel
                    {
                        Id = i + 1,
                        PipelineId = newPipelineModel.Id,
                        Description = selectedCampaign.MasterTaskDescriptions[i],
                        CreatedDate = DateTime.Today,
                        Deadline = DateTime.Today.AddDays(7),
                        IsMasterTask = true,
                        Stage = selectedCampaign.Stages[i]
                    };
                newPipelineModel.Tasks.Add(masterTask);
            }
        }

        // Add the pipeline to the service
        PipelineService.AddPipeline(newPipelineModel);

        // Navigate to the Pipeline Details page for the newly assigned pipeline
        NavigationManager.NavigateTo($"/pipeline/{newPipelineModel.Id}");
    }
}
