@page "/newpipeline"
@using BlazorApp.Models
@using BlazorApp.Services
@using System.Security.Claims
@inject PipelineService PipelineService
@inject ContactService ContactService
@inject CampaignService CampaignService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>New Pipeline</PageTitle>

<h3>Assign Campaign to Contact</h3>

<EditForm Model="newPipelineModel" OnValidSubmit="AssignPipeline">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <!-- Dropdown for selecting a contact -->
    <div class="form-group">
        <label for="contactId">Select Contact</label>
        <select id="contactId" class="form-control" @bind="newPipelineModel.ContactId">
            <option value="">-- Select a Contact --</option>
            @foreach (var contact in contacts)
            {
                <option value="@contact.Id">@contact.Name</option>
            }
        </select>
    </div>

    <!-- Dropdown for selecting a campaign -->
    <div class="form-group">
        <label for="campaignId">Select Campaign</label>
        <select id="campaignId" class="form-control" @bind="newPipelineModel.CampaignId">
            <option value="">-- Select a Campaign --</option>
            @foreach (var campaign in campaigns)
            {
                <option value="@campaign.Id">@campaign.Name</option>
            }
        </select>
    </div>

    <!-- Error message for missing required fields -->
    @if (showErrorMessage)
    {
        <div class="alert alert-danger">Please select a contact and a campaign.</div>
    }

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Assign Campaign</button>
</EditForm>

@code {
    private PipelineModel newPipelineModel = new PipelineModel();
    private List<ContactListRow> contacts = new List<ContactListRow>();
    private List<CampaignListRow> campaigns = new List<CampaignListRow>();
    private bool showErrorMessage = false;
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier);
        var userIdInt = userId == default ? default : int.Parse(userId.Value);

        // Load contacts associated with the user
        int userIdNum = int.Parse(userId.Value);
        contacts = ContactService.GetContacts(userIdNum);

        // Load all campaigns
        campaigns = CampaignService.GetAllCampaigns();
    }

    private void AssignPipeline()
    {
        if (newPipelineModel.CampaignId == 0 || newPipelineModel.ContactId == 0)
        {
            showErrorMessage = true;
            return;
        }

        // Get the selected campaign
        var selectedCampaign = CampaignService.GetCampaignById(newPipelineModel.CampaignId);

        // Set active stage
        newPipelineModel.ActiveStage = selectedCampaign.Stages.First().Name;

        // Initialize master tasks
        foreach (var stage in selectedCampaign.Stages)
        {
            if (stage.RequireMasterTask)
            {
                var masterTask = new TaskModel
                {
                    PipelineId = newPipelineModel.Id,
                    Description = stage.MasterTaskDescription,
                    CreatedDate = DateTime.Today,
                    Deadline = DateTime.Today.AddDays(7),
                    IsMasterTask = true,
                    Stage = stage.Name,
                    IsCompleted = false
                };
                newPipelineModel.Tasks.Add(masterTask);
            }
        }

        // Add the pipeline via the service
        PipelineService.AddPipeline(newPipelineModel);

        // Navigate to the Pipeline Details page
        NavigationManager.NavigateTo($"/pipeline/{newPipelineModel.Id}");
    }
}