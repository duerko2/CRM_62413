@page "/newpipeline"
@using BlazorApp.Models
@using BlazorApp.Services
@inject PipelineService PipelineService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>New Pipeline</PageTitle>

<h3>Assign Campaign to Contact</h3>

<EditForm Model="newPipelineModel" OnValidSubmit="AssignPipeline">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <!-- Dropdown for selecting a contact -->
    <div class="form-group">
        <label for="contactId">Select Contact</label>
        <select id="contactId" class="form-control" @bind="newPipelineModel.ContactId">
            <option value="">-- Select a Contact --</option>
            @foreach (var contact in contacts)
            {
                <option value="@contact.Id">@contact.Name</option>
            }
        </select>
    </div>

    <!-- Dropdown for selecting a campaign -->
    <div class="form-group">
        <label for="campaignId">Select Campaign</label>
        <select id="campaignId" class="form-control" @bind="newPipelineModel.CampaignId">
            <option value="">-- Select a Campaign --</option>
            @foreach (var campaign in campaigns)
            {
                <option value="@campaign.Id">@campaign.Name</option>
            }
        </select>
    </div>

    <!-- Error message for missing required fields -->
    @if (showErrorMessage)
    {
        <div class="alert alert-danger">Please select a contact and a campaign.</div>
    }

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Assign Campaign</button>
</EditForm>

@code {
    private PipelineModel newPipelineModel = new PipelineModel();
    private List<ContactListRow> contacts = new();
    private List<CampaignListRow> campaigns = new();
    private bool showErrorMessage = false;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userId = int.Parse(user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");

        // Fetch data through service
        contacts = PipelineService.GetContactsForUser(userId);
        campaigns = PipelineService.GetAllCampaigns();
    }

    private async Task AssignPipeline()
    {
        try
        {
            var pipelineId = await PipelineService.CreateNewPipeline(newPipelineModel);
            NavigationManager.NavigateTo($"/pipeline/{pipelineId}");
        }
        catch (Exception ex)
        {
            showErrorMessage = true;
        }
    }
}
