@page "/newcampaign"
@using BlazorApp.Models
@using BlazorApp.Services
@inject CampaignService CampaignService
@inject NavigationManager NavigationManager

<PageTitle>New Campaign</PageTitle>

<h3>Create New Campaign</h3>

<EditForm Model="newCampaignModel" OnValidSubmit="CreateCampaign">
    <ValidationSummary class="alert alert-danger" />

    <!-- Input for campaign name -->
    <div class="form-group">
        <label for="campaignName">Campaign Name</label>
        <InputText id="campaignName" class="form-control" @bind-Value="newCampaignModel.Name" placeholder="Enter campaign name" />
    </div>

    <!-- Dropdown to select number of stages -->
    <div class="form-group">
        <label for="numberOfStages">Number of Stages (1-5)</label>
        <select id="numberOfStages" class="form-control" @bind="numberOfStages">
            @for (int i = 1; i <= 5; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>

    <!-- Inputs for stages and master tasks -->
    <div class="form-group">
        <label>Define Stages</label>
        @if (newCampaignModel.Stages != null)
        {
            <!-- Begin InputRadioGroup -->
            <InputRadioGroup @bind-Value="selectedConversionStageIndex">
                @for (int stageIndex = 0; stageIndex < newCampaignModel.Stages.Count; stageIndex++)
                {
                    var stage = newCampaignModel.Stages[stageIndex];
                    <div class="stage-section">
                        <h5>Stage @(stageIndex + 1)</h5>
                        <div class="form-group">
                            <label>Stage Name (max 20 chars)</label>
                            <InputText class="form-control" maxlength="20" @bind-Value="stage.Name" placeholder="Enter stage name" />
                        </div>
                        <div class="form-group">
                            <label>
                                <InputCheckbox @bind-Value="stage.RequireMasterTask" />
                                Require Master Task
                            </label>
                        </div>
                        @if (stage.RequireMasterTask)
                        {
                            <div class="form-group">
                                <label>Master Task Description</label>
                                <InputTextArea class="form-control" @bind-Value="stage.MasterTaskDescription" placeholder="Enter master task description" />
                            </div>
                        }
                        <div class="form-group">
                            <label>
                                <InputRadio Value="@stageIndex" />
                                Convert contact to customer when this stage is completed
                            </label>
                        </div>
                    </div>
                }
            </InputRadioGroup>
            <!-- End InputRadioGroup -->
        }
        else
        {
            <p>Error: Stages not initialized.</p>
        }
    </div>

    <!-- Error message display -->
    @if (errorMessages.Any())
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var err in errorMessages)
                {
                    <li>@err</li>
                }
            </ul>
        </div>
    }

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Create Campaign</button>
</EditForm>

<style>
    .stage-section {
        border: 1px solid #dee2e6;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 15px;
        background-color: #f8f9fa;
    }
</style>

@code {
    private CampaignModel newCampaignModel = new CampaignModel();
    private int _numberOfStages = 1;
    private int numberOfStages
    {
        get => _numberOfStages;
        set
        {
            if (_numberOfStages != value)
            {
                AdjustStages(value);
                _numberOfStages = value;
            }
        }
    }
    private List<string> errorMessages = new List<string>();

    // Initialize to -1 to indicate no selection
    private int selectedConversionStageIndex = -1;

    protected override void OnInitialized()
    {
        AdjustStages(numberOfStages);
    }

    private void AdjustStages(int newCount)
    {
        if (newCampaignModel.Stages == null)
        {
            newCampaignModel.Stages = new List<CampaignStageModel>();
        }

        int currentCount = newCampaignModel.Stages.Count;

        if (newCount > currentCount)
        {
            // Add new stages
            for (int i = currentCount; i < newCount; i++)
            {
                newCampaignModel.Stages.Add(new CampaignStageModel()
                    {
                        Name = string.Empty,
                        MasterTaskDescription = string.Empty
                    });
            }
        }
        else if (newCount < currentCount)
        {
            // Remove extra stages
            newCampaignModel.Stages.RemoveRange(newCount, currentCount - newCount);
        }
    }

    private async Task CreateCampaign()
    {
        errorMessages.Clear();

        // Set the IsConversionStage property based on selectedConversionStageIndex
        if (selectedConversionStageIndex >= 0 && selectedConversionStageIndex < newCampaignModel.Stages.Count)
        {
            for (int i = 0; i < newCampaignModel.Stages.Count; i++)
            {
                newCampaignModel.Stages[i].IsConversionStage = (i == selectedConversionStageIndex);
            }
        }
        else
        {
            // Ensure that IsConversionStage is false for all stages if none is selected
            foreach (var stage in newCampaignModel.Stages)
            {
                stage.IsConversionStage = false;
            }
        }

        var errors =  CampaignService.AddCampaign(newCampaignModel, numberOfStages);

        if (errors != null && errors.Any())
        {
            errorMessages = errors;
            return;
        }

        errorMessages.Clear();
        NavigationManager.NavigateTo("/campaigns");
    }
}
