@inject NavigationManager NavigationManager

<div class="accordion open mb-4 mt-4" id="tasksAccordion">
    <!-- Past Deadline Section -->
    @if (tasks.Any(t => t.IsOverdue))
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="pastDeadlineHeading">
                <button class="accordion-button " type="button" data-bs-toggle="collapse" data-bs-target="#pastDeadline" aria-expanded="true" aria-controls="pastDeadline">
                    <h6 class="bi bi-exclamation-triangle-fill alert alert-danger">
                        Past Deadline
                    </h6>
                </button>
            </h2>
            <div id="pastDeadline" class="accordion-collapse collapse show" aria-labelledby="pastDeadlineHeading" data-bs-parent="#tasksAccordion">
                <div class="accordion-body">
                    <div class="row row-cols-1 g-3">
                        @foreach (var task in tasks.Where(t => t.IsOverdue))
                        {
                            <div class="col">
                                <div @onclick="@(() => GoToPipeline(task.PipelineId))">
                                    <div class="card border-danger">
                                        <div class="card-body" onClick="@(() => GoToPipeline(task.PipelineId))">
                                            <h5 class="card-title">@task.Description</h5>
                                            <h6 class="card-subtitle mb-2 text-muted" onClick="@(() => GoToPipeline(task.PipelineId))">Pipeline: @task.PipelineName</h6>
                                            <p class="card-text">
                                                <strong>Created:</strong> @task.CreatedDate.ToShortDateString()<br/>
                                                <strong>Deadline:</strong> @task.Deadline.ToShortDateString()
                                            </p>
                                            <button @onclick="@(() => GoToPipeline(task.PipelineId))">GOTO</button>
                                            <span class="badge bg-danger"><i class="bi bi-exclamation-triangle"></i> Overdue</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    
    <!-- Close to Deadline Section -->
    @if (tasks.Any(t => t.IsCloseToDeadline))
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="closeToDeadlineHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#closeToDeadline" aria-expanded="false" aria-controls="closeToDeadline">
                    <h6 class="bi bi-exclamation-circle-fill alert alert-warning">
                        Close To Deadline
                    </h6>
                </button>
            </h2>
            <div id="closeToDeadline" class="accordion-collapse collapse" aria-labelledby="closeToDeadlineHeading" data-bs-parent="#tasksAccordion">
                <div class="accordion-body">
                    <div class="row row-cols-1 g-3">
                        @foreach (var task in tasks.Where(t => t.IsCloseToDeadline))
                        {
                            <div class="col">
                                <div class="card border-warning">
                                    <div class="card-body">
                                        <h5 class="card-title">@task.Description</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">Pipeline: @task.PipelineName</h6>
                                        <p class="card-text">
                                            <strong>Created:</strong> @task.CreatedDate.ToShortDateString()<br/>
                                            <strong>Deadline:</strong> @task.Deadline.ToShortDateString()
                                        </p>
                                        <span class="badge bg-warning text-dark">Close to Deadline</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Other Tasks Section -->
    @if (tasks.Any(t => !t.IsOverdue && !t.IsCloseToDeadline))
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="otherTasksHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#otherTasks" aria-expanded="false" aria-controls="otherTasks">
                    <h6 class="bi bi-info-circle-fill alert alert-info">
                        My Tasks
                    </h6>
                </button>
            </h2>
            <div id="otherTasks" class="accordion-collapse collapse" aria-labelledby="otherTasksHeading" data-bs-parent="#tasksAccordion">
                <div class="accordion-body">
                    <div class="row row-cols-1 g-3">
                        @foreach (var task in tasks.Where(t => !t.IsOverdue && !t.IsCloseToDeadline))
                        {
                            <div class="col">
                                <div class="card border-secondary">
                                    <div class="card-body">
                                        <h5 class="card-title">@task.Description</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">Pipeline: @task.PipelineName</h6>
                                        <p class="card-text">
                                            <strong>Created:</strong> @task.CreatedDate.ToShortDateString()<br/>
                                            <strong>Deadline:</strong> @task.Deadline.ToShortDateString()
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private List<TaskViewModel> tasks = new();

    protected override void OnInitialized()
    {
        // Mock data for demonstration purposes
        tasks = new List<TaskViewModel>
        {
            new TaskViewModel
            {
                Id = 1,
                Description = "Prepare spring campaign presentation",
                PipelineName = "Marketing Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-7),
                Deadline = DateTime.Now.AddDays(2),
                IsOverdue = false,
                IsCloseToDeadline = true
            },
            new TaskViewModel
            {
                Id = 2,
                Description = "Finalize product specs",
                PipelineName = "Development Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-15),
                Deadline = DateTime.Now.AddDays(-1),
                IsOverdue = true,
                IsCloseToDeadline = false
            },
            new TaskViewModel
            {
                Id = 3,
                Description = "Send proposal to client",
                PipelineName = "Sales Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-10),
                Deadline = DateTime.Now.AddDays(5),
                IsOverdue = false,
                IsCloseToDeadline = false
            },
            new TaskViewModel
            {
                Id = 4,
                Description = "Follow up with leads",
                PipelineName = "Sales Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-3),
                Deadline = DateTime.Now.AddDays(1),
                IsOverdue = false,
                IsCloseToDeadline = true
            },
            new TaskViewModel
            {
                Id = 5,
                Description = "Review and approve budget",
                PipelineName = "Finance Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-5),
                Deadline = DateTime.Now.AddDays(3),
                IsOverdue = false,
                IsCloseToDeadline = false
            },
            new TaskViewModel
            {
                Id = 6,
                Description = "Prepare Q3 financial report",
                PipelineName = "Finance Pipeline",
                PipelineId = 7,
                CreatedDate = DateTime.Now.AddDays(-10),
                Deadline = DateTime.Now.AddDays(5),
                IsOverdue = false,
                IsCloseToDeadline = false
            }
        };
    }
    private void GoToPipeline(int pipelineId)
    {
        Console.WriteLine("HELLO");
        NavigationManager.NavigateTo($"/pipeline/{pipelineId}");
    }
}
