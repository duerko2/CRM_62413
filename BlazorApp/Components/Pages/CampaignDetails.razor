@page "/campaign/{campaignId:int}/contact/{contactId:int}"
@using BlazorApp.Models
@inject BlazorApp.Services.CampaignService CampaignService
@inject BlazorApp.Services.ContactService ContactService
@inject NavigationManager NavigationManager

<PageTitle>@campaign?.Name ?? "Campaign Detail"</PageTitle>

<button class="btn btn-link" @onclick="GoBack" style="font-size:24px;">
    &#8592; Back
</button>

<div class="container">
    @if (campaign != null && contact != null)
    {
        <!-- Display campaign and contact information -->
        <h1>@campaign.Name</h1>
        <h4>@contact.Name (ID: @contact.Id)</h4>

        <!-- Centered Pipeline Status Heading -->
        <div class="text-center">
            <h5 style="font-size: 24px;">Pipeline Status</h5>
        </div>

        <!-- Pipeline status buttons displayed as a chevron flow -->
        <div class="d-flex justify-content-center pipeline-status">
            @foreach (var stage in campaign.PipelineStages)
            {
                <!-- Chevron-shaped buttons representing each pipeline stage -->
                <button class="@GetButtonClass(stage) chevron-button" @onclick="() => ToggleStage(stage)">
                    @stage
                </button>
            }
        </div>

        <!-- Section for displaying tasks and latest quote/order/invoice side by side -->
        <div class="row mt-4">
            <!-- Open tasks column -->
            <div class="col-md-4">
                <h5>Open Tasks</h5>
                <div class="scrollable-tasks">
                    <ul class="task-list">
                        @foreach (var task in campaign.Tasks)
                        {
                            <li>
                                <div class="task-item">
                                    <div class="task-item-content">
                                        <!-- Display task description and dates -->
                                        <p><strong>Description:</strong> @task.Description</p>
                                        <p><strong>Created:</strong> @($"{task.CreatedDate:dd/MM/yyyy}")</p>
                                        <p><strong>Deadline:</strong> @($"{task.Deadline:dd/MM/yyyy}")</p>
                                    </div>
                                    <!-- Toggleable "Complete" button for each task -->
                                    <button class="@GetButtonClassForTask(task)" @onclick="() => ToggleTaskComplete(task)">
                                        @(taskCompletionStates[task] ? "Completed" : "Complete")
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Latest (quote, order, invoice) column -->
            <div class="col-md-8">
                <h5>Latest Quote/Order/Invoice</h5>
                <div class="latest-quote">
                    @if (!string.IsNullOrEmpty(latestData.LatestType))
                    {
                        <p><strong>@latestData.LatestType:</strong> @latestData.Details</p>
                        <p><strong>Date:</strong> @($"{latestData.DateCreated:dd/MM/yyyy}")</p>
                    }
                    else
                    {
                        <p>@latestData.Message</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading campaign details...</p>
    }
</div>

<style>
    /* General container margin */
    .container {
        margin: 20px;
    }

    /* Styling for the campaign and contact headings */
    h1 {
        font-size: 2em;
        margin-bottom: 10px;
    }

    h4 {
        font-size: 1.5em;
        margin-bottom: 30px;
    }

    /* Pipeline status button container and spacing */
    .pipeline-status {
        display: flex;
        justify-content: center;
        gap: 10px; /* Space between the pipeline buttons */
        margin-bottom: 20px;
    }

    /* Align text to center */
    .text-center {
        text-align: center;
    }

    /* Scrollable task list container */
    .scrollable-tasks {
        border: 2px solid #ddd; /* Border around the task list */
        height: 300px; /* Fixed height for scrollable area */
        padding: 10px;
        overflow-y: scroll; /* Scrollable content if overflow */
    }

    /* Styling for individual task items */
    .task-item {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 5px;
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
        /* Removed fixed height */
    }

    /* Task item content */
    .task-item-content {
        /* No changes needed here */
    }

    /* Remove margin from paragraphs inside task items */
    .task-item p {
        margin: 0;
    }

    /* Align the "Complete" button at the bottom of the task item */
    .task-item button {
        margin-top: auto; /* Pushes the button to the bottom */
    }


    /* Remove bullet points from the task list */
    ul.task-list {
        list-style-type: none;
        padding-left: 0;
    }

    /* Styling for the latest quote/order/invoice box */
    .latest-quote {
        border: 1px solid #ddd;
        padding: 20px;
        height: 150px;
        background-color: #f4f4f4;
    }

    /* Chevron-shaped buttons for pipeline stages */
    .chevron-button {
        clip-path: polygon(0 0, 90% 0, 100% 50%, 90% 100%, 0 100%, 10% 50%);
        padding: 10px 20px;
        background-color: #ddd;
        border: none;
        color: black;
        margin-right: 5px;
    }

        /* Hover effect for chevron buttons */
        .chevron-button:hover {
            background-color: #007bff;
            color: white;
        }

    /* Active button style */
    .btn-primary.active {
        background-color: #007bff;
        color: white;
    }

    /* Inactive button style */
    .btn-outline-secondary {
        background-color: #ddd;
        color: black;
    }

    /* Optional column width styling */
    .col-md-4, .col-md-8 {
        margin-bottom: 20px;
    }
</style>

@code {
    [Parameter]
    public int campaignId { get; set; }

    [Parameter]
    public int contactId { get; set; }

    private Campaign campaign;
    private Contact contact;

    private LatestDataModel latestData = new LatestDataModel();

    // Track the active/inactive state of pipeline stages
    private Dictionary<string, bool> stageStates = new Dictionary<string, bool>();

    // Track the completion status of each task
    private Dictionary<TaskModel, bool> taskCompletionStates = new Dictionary<TaskModel, bool>();

    protected override void OnInitialized()
    {
        // Fetch the campaign data based on campaignId
        campaign = CampaignService.GetCampaignById(campaignId);

        if (campaign == null)
        {
            // Handle campaign not found
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Fetch the contact data based on contactId
        contact = ContactService.GetContactById(contactId);

        if (contact == null)
        {
            // Handle contact not found
            NavigationManager.NavigateTo("/contacts");
            return;
        }

        // Initialize latest data
        latestData = CampaignService.GetLatestData(contactId, campaign.ActiveStage);

        // Initialize all pipeline stages
        foreach (var stage in campaign.PipelineStages)
        {
            stageStates[stage] = stage == campaign.ActiveStage;
        }

        // Initialize all tasks as incomplete
        foreach (var task in campaign.Tasks)
        {
            taskCompletionStates[task] = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/contacts/{contact.Id}");
    }

    // Toggle the active state of a pipeline stage when clicked
    private void ToggleStage(string stage)
    {
        // Deactivate all stages
        foreach (var key in campaign.PipelineStages)
        {
            stageStates[key] = false;
        }

        // Activate the selected stage
        stageStates[stage] = true;

        // Update the campaign's active stage
        campaign.ActiveStage = stage;

        // Update latest data
        latestData = CampaignService.GetLatestData(contactId, campaign.ActiveStage);
    }

    // Return the button class based on the pipeline stage's active state
    private string GetButtonClass(string stage)
    {
        return stageStates[stage] ? "btn btn-primary active" : "btn btn-outline-secondary";
    }

    // Toggle the completion state of a task when "Complete" is clicked
    private void ToggleTaskComplete(TaskModel task)
    {
        taskCompletionStates[task] = !taskCompletionStates[task];  // Flip the complete/incomplete state
    }

    // Return the button class based on the task's completion status
    private string GetButtonClassForTask(TaskModel task)
    {
        return taskCompletionStates[task] ? "btn btn-primary active" : "btn btn-outline-secondary";
    }
}
